#!/bin/bash -x

#####################################################################
#                                                                   #
#               Compiles Faust programs to core audio-qt            #
#               (c) Grame, 2012                                     #
#                                                                   #
#####################################################################

. faustpath
. faustoptflags
CXXFLAGS=$MYGCCFLAGS

ARCHFILE="ca-qt.cpp"
ARCHLIB="-L/usr/local/lib -L/opt/local/lib -framework CoreAudio -framework AudioUnit -framework CoreServices -framework CoreMIDI -framework CoreFoundation"
PATH=$PATH:/usr/local/bin
DEBUG=false
#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

# PHASE 1 : Look for -icc option to force use of intel icc (actually icpc)
# without having to configure CXX and CXXFLAGS
for p in $@; do
	if [ "$p" = -icc ]; then
		# we ignore -icc when compiling for QT
		TOTO=""
		#CXX=icpc
		#CXXFLAGS='-Wfatal-errors -O3 -xT -ftz -fno-alias -fp-model fast=2'
    fi
done

#PHASE 2 : dispatch command arguments

OSCINC=""
QTDEFS=""
OSCLIB=""
POLY="POLY"
DEPLOY=""

for p in $@; do
    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2caqt [-httpd] [-qrcode] [-poly] [-poly2] [-midi] [-osc] [-debug] <file.dsp>"
        echo "Use '-httpd' to activate HTTP control"
        echo "Use '-qrcode' to activate QR code generation"
        echo "Use '-poly' to produce a polyphonic self-contained DSP, ready to be used with MIDI events"
        echo "Use '-poly2' to produce a polyphonic DSP connected to the effect part, ready to be used with MIDI events"
        echo "Use '-midi' to activate MIDI control"
        echo "Use '-osc' to activate OSC control"
        echo "Use '-debug' to print all the build steps"
    fi
    
    if [ "$p" = -omp ]; then
        if [[ $CXX == "icpc" ]]; then
            OMP="-openmp"
        else
            OMP="-fopenmp"
        fi
    fi
  
    if [ "$p" = -debug ]; then
    	DEBUG=true
    elif [ $p = "-deploy" ]; then
        DEPLOY="yes"
    elif [ "$p" = -icc ]; then
    	ignore=" "
    elif [ $p = "-poly" ]; then
        POLYDEFS="DEFINES += POLY"
        POLY="POLY1"
    elif [ $p = "-poly2" ]; then
        POLYDEFS="DEFINES += POLY2"
        POLY="POLY2"
    elif [ $p = "-midi" ]; then
        MIDIDEFS="DEFINES += MIDICTRL"
    elif [ $p = "-osc" ]; then
		 OSCDEFS="DEFINES += OSCCTRL"
		 OSCLIBS="-lOSCFaust"
	elif [ "$p" = "-httpd" ]; then
		HTTPDEFS="DEFINES += HTTPCTRL"
		HTTPLIBS="-lHTTPDFaust -lmicrohttpd -lqrencode"
	elif [ "$p" = "-qrcode" ]; then # requires -httpd
		QRDEFS="DEFINES += QRCODECTRL"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -f "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done



#-------------------------------------------------------------------
# Check darwin specifics
#
if [[ $(uname) == Darwin ]]; then
    SYS_VERSION=$(uname -v | cut -d : -f1 | cut -d. -f1 | cut -d' ' -f4)
    if [ $SYS_VERSION -ge 13 ]
	then
	    SPEC=""
	    CLANGOPT="QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.9"   # works with El Capitan + QT 5.6 (macport)
	else
	    SPEC="-spec macx-g++"
	    CLANGOPT=""
	fi
    EXT=".app"
fi

#-------------------------------------------------------------------
# compile the *.dsp files
#
for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
	SRCDIR=$(dirname "$p")

    # creates a temporary dir 
    TDR=$(mktemp -d faust.XXX)
	TMP="$TDR/${f%.dsp}"
    mkdir "$TMP"

    # compile faust to c++
    
    if [ $POLY = "POLY2" ]; then
        faust -i -a $ARCHFILE $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}_voice.cpp" || exit
        faust -i -cn effect -a minimal-effect.cpp "$SRCDIR/${f%.dsp}_effect.dsp" -o "$TMP/effect.cpp" || exit
    else
        faust -i -a $ARCHFILE $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}.cpp" || exit
    fi

    # compile c++ to binary
    (
	    cd "$TMP"
	    qmake-qt4 -project "QT += widgets printsupport network" "CONFIG+=warn_off" "$CLANGOPT" "INCLUDEPATH+=$CUR" "INCLUDEPATH+=$FAUSTINC /opt/local/include" "QMAKE_CXXFLAGS= $CXXFLAGS -Wno-unused-parameter $FAUSTTOOLSFLAGS" "LIBS+=$ARCHLIB $OSCLIBS $HTTPLIBS" "HEADERS+=$FAUSTINC/faust/gui/faustqt.h" "RESOURCES+= $FAUSTINC/faust/gui/Styles/Grey.qrc" "$OSCDEFS" "$HTTPDEFS" "$QRDEFS" "$POLYDEFS" "$MIDIDEFS" 
	    qmake-qt4 $SPEC
        make
    ) > /dev/null || exit

    # on Mac add the qt libraries to the bundle
    if [[ $(uname) == Darwin ]]; then
        if [ "$DEPLOY" = "yes" ]; then
            macdeployqt "$TMP/${f%.dsp}$EXT" || exit
        fi
    fi

    rm -rf "$SRCDIR/${f%.dsp}$EXT"
    cp -r "$TMP/${f%.dsp}$EXT" "$SRCDIR/${f%.dsp}$EXT"
    RMTMP=true
    if $DEBUG;
    then
	    echo "====> delete temporary folder $TDR ? [Y/n]"
	    read DEL
	    [ $DEL == "n" ] && RMTMP=false
	fi	
	[ $RMTMP == true ] && rm -rf "$TDR"

    # collect binary file name for FaustGIDE
    BINARIES="$BINARIES$SRCDIR/${f%.dsp}$EXT;"
done

echo $BINARIES


